// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.mutation_create_review_semantic_naming.type

import com.apollographql.apollo3.api.Input
import com.apollographql.apollo3.api.InputType
import com.apollographql.apollo3.api.internal.InputFieldMarshaller
import com.apollographql.apollo3.api.internal.InputFieldWriter
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

/**
 * The input object sent when someone is creating a new review
 */
@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
data class ReviewInput(
  /**
   * 0-5 stars
   */
  val stars: Int,
  /**
   * for test purpose only
   */
  val nullableIntFieldWithDefaultValue: Input<Int> = Input.present(10),
  /**
   * Comment about the movie, optional
   */
  val commentary: Input<String> = Input.absent(),
  /**
   * Favorite color, optional
   */
  val favoriteColor: ColorInput,
  /**
   * for test purpose only
   */
  val enumWithDefaultValue: Input<Episode> = Input.present(Episode.JEDI),
  /**
   * for test purpose only
   */
  val nonNullableEnumWithDefaultValue: Episode = Episode.JEDI,
  /**
   * for test purpose only
   */
  val nullableEnum: Input<Episode> = Input.absent(),
  /**
   * for test purpose only
   */
  val listOfCustomScalar: Input<List<Any?>> = Input.absent(),
  /**
   * for test purpose only
   */
  val customScalar: Input<Any> = Input.absent(),
  /**
   * for test purpose only
   */
  val listOfEnums: Input<List<Episode?>> = Input.present(listOf(Episode.NEWHOPE, Episode.EMPIRE)),
  /**
   * for test purpose only
   */
  val listOfInt: Input<List<Int?>> = Input.present(listOf(1, 2, 3)),
  /**
   * for test purpose only
   */
  val listOfString: Input<List<String?>> = Input.present(listOf("test1", "test2", "test3")),
  /**
   * for test purpose only
   */
  val listOfStringNonOptional: List<String?>,
  /**
   * for test purpose only
   */
  val listOfInputTypes: Input<List<ColorInput?>> = Input.present(emptyList()),
  /**
   * for test purpose only
   */
  val booleanWithDefaultValue: Input<Boolean> = Input.present(true),
  /**
   * for test purpose only
   */
  val booleanNonOptional: Input<Boolean> = Input.absent(),
  /**
   * for test purpose only
   */
  val listOfListOfString: Input<List<List<String>>> = Input.absent(),
  /**
   * for test purpose only
   */
  val listOfListOfEnum: Input<List<List<Episode>>> = Input.absent(),
  /**
   * for test purpose only
   */
  val listOfListOfCustom: Input<List<List<Any>>> = Input.absent(),
  /**
   * for test purpose only
   */
  val listOfListOfObject: Input<List<List<ColorInput>>> = Input.absent(),
  /**
   * for test purpose only
   */
  val capitalizedField: Input<String> = Input.absent(),
  /**
   * for test purpose only
   */
  val capitalizedInt: Input<Int> = Input.absent()
) : InputType {
  override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller.invoke { writer ->
    writer.writeInt("stars", this@ReviewInput.stars)
    if (this@ReviewInput.nullableIntFieldWithDefaultValue.isPresent) {
      writer.writeInt("nullableIntFieldWithDefaultValue",
          this@ReviewInput.nullableIntFieldWithDefaultValue.getOrThrow())
    }
    if (this@ReviewInput.commentary.isPresent) {
      writer.writeString("commentary", this@ReviewInput.commentary.getOrThrow())
    }
    writer.writeObject("favoriteColor", this@ReviewInput.favoriteColor.marshaller())
    if (this@ReviewInput.enumWithDefaultValue.isPresent) {
      writer.writeString("enumWithDefaultValue",
          this@ReviewInput.enumWithDefaultValue.getOrThrow()?.rawValue)
    }
    writer.writeString("nonNullableEnumWithDefaultValue",
        this@ReviewInput.nonNullableEnumWithDefaultValue.rawValue)
    if (this@ReviewInput.nullableEnum.isPresent) {
      writer.writeString("nullableEnum", this@ReviewInput.nullableEnum.getOrThrow()?.rawValue)
    }
    if (this@ReviewInput.listOfCustomScalar.isPresent) {
      writer.writeList("listOfCustomScalar", this@ReviewInput.listOfCustomScalar.getOrThrow()?.let {
          value ->
        InputFieldWriter.ListWriter { listItemWriter ->
          value.forEach { value ->
            listItemWriter.writeCustom(CustomScalars.Date, value)
          }
        }
      })
    }
    if (this@ReviewInput.customScalar.isPresent) {
      writer.writeCustom("customScalar", CustomScalars.Date,
          this@ReviewInput.customScalar.getOrThrow())
    }
    if (this@ReviewInput.listOfEnums.isPresent) {
      writer.writeList("listOfEnums", this@ReviewInput.listOfEnums.getOrThrow()?.let { value ->
        InputFieldWriter.ListWriter { listItemWriter ->
          value.forEach { value ->
            listItemWriter.writeString(value?.rawValue)
          }
        }
      })
    }
    if (this@ReviewInput.listOfInt.isPresent) {
      writer.writeList("listOfInt", this@ReviewInput.listOfInt.getOrThrow()?.let { value ->
        InputFieldWriter.ListWriter { listItemWriter ->
          value.forEach { value ->
            listItemWriter.writeInt(value)
          }
        }
      })
    }
    if (this@ReviewInput.listOfString.isPresent) {
      writer.writeList("listOfString", this@ReviewInput.listOfString.getOrThrow()?.let { value ->
        InputFieldWriter.ListWriter { listItemWriter ->
          value.forEach { value ->
            listItemWriter.writeString(value)
          }
        }
      })
    }
    writer.writeList("listOfStringNonOptional") { listItemWriter ->
      this@ReviewInput.listOfStringNonOptional.forEach { value ->
        listItemWriter.writeString(value)
      }
    }
    if (this@ReviewInput.listOfInputTypes.isPresent) {
      writer.writeList("listOfInputTypes", this@ReviewInput.listOfInputTypes.getOrThrow()?.let {
          value ->
        InputFieldWriter.ListWriter { listItemWriter ->
          value.forEach { value ->
            listItemWriter.writeObject(value?.marshaller())
          }
        }
      })
    }
    if (this@ReviewInput.booleanWithDefaultValue.isPresent) {
      writer.writeBoolean("booleanWithDefaultValue",
          this@ReviewInput.booleanWithDefaultValue.getOrThrow())
    }
    if (this@ReviewInput.booleanNonOptional.isPresent) {
      writer.writeBoolean("booleanNonOptional", this@ReviewInput.booleanNonOptional.getOrThrow())
    }
    if (this@ReviewInput.listOfListOfString.isPresent) {
      writer.writeList("listOfListOfString", this@ReviewInput.listOfListOfString.getOrThrow()?.let {
          value ->
        InputFieldWriter.ListWriter { listItemWriter ->
          value.forEach { value ->
            listItemWriter.writeList { listItemWriter ->
              value.forEach { value ->
                listItemWriter.writeString(value)
              }
            }
          }
        }
      })
    }
    if (this@ReviewInput.listOfListOfEnum.isPresent) {
      writer.writeList("listOfListOfEnum", this@ReviewInput.listOfListOfEnum.getOrThrow()?.let {
          value ->
        InputFieldWriter.ListWriter { listItemWriter ->
          value.forEach { value ->
            listItemWriter.writeList { listItemWriter ->
              value.forEach { value ->
                listItemWriter.writeString(value.rawValue)
              }
            }
          }
        }
      })
    }
    if (this@ReviewInput.listOfListOfCustom.isPresent) {
      writer.writeList("listOfListOfCustom", this@ReviewInput.listOfListOfCustom.getOrThrow()?.let {
          value ->
        InputFieldWriter.ListWriter { listItemWriter ->
          value.forEach { value ->
            listItemWriter.writeList { listItemWriter ->
              value.forEach { value ->
                listItemWriter.writeCustom(CustomScalars.Date, value)
              }
            }
          }
        }
      })
    }
    if (this@ReviewInput.listOfListOfObject.isPresent) {
      writer.writeList("listOfListOfObject", this@ReviewInput.listOfListOfObject.getOrThrow()?.let {
          value ->
        InputFieldWriter.ListWriter { listItemWriter ->
          value.forEach { value ->
            listItemWriter.writeList { listItemWriter ->
              value.forEach { value ->
                listItemWriter.writeObject(value.marshaller())
              }
            }
          }
        }
      })
    }
    if (this@ReviewInput.capitalizedField.isPresent) {
      writer.writeString("CapitalizedField", this@ReviewInput.capitalizedField.getOrThrow())
    }
    if (this@ReviewInput.capitalizedInt.isPresent) {
      writer.writeInt("CapitalizedInt", this@ReviewInput.capitalizedInt.getOrThrow())
    }
  }
}
